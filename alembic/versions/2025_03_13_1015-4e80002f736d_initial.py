"""initial

Revision ID: 4e80002f736d
Revises:
Create Date: 2025-03-13 10:15:37.984393+00:00

"""

from typing import Sequence, Union

import sqlalchemy as sa

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "4e80002f736d"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "permissions",
        sa.Column("id", sa.UUID(), nullable=False, comment="ID разрешения."),
        sa.Column("name", sa.String(), nullable=False, comment="Название разрешения."),
        sa.Column("created_at", sa.TIMESTAMP(timezone=True), nullable=False),
        sa.Column("updated_at", sa.TIMESTAMP(timezone=True), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("permissions_pkey")),
        sa.UniqueConstraint("name", name=op.f("permissions_name_key")),
    )
    op.create_table(
        "roles",
        sa.Column("id", sa.UUID(), nullable=False, comment="ID роли."),
        sa.Column(
            "name",
            sa.Enum("MERCHANT", "TRADER", "SUPPORT", "ADMIN", name="roleenum"),
            nullable=False,
            comment="Название роли.",
        ),
        sa.Column("created_at", sa.TIMESTAMP(timezone=True), nullable=False),
        sa.Column("updated_at", sa.TIMESTAMP(timezone=True), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("roles_pkey")),
        sa.UniqueConstraint("name", name=op.f("roles_name_key")),
    )
    op.create_table(
        "roles_permissions",
        sa.Column("role_id", sa.UUID(), nullable=False),
        sa.Column("permission_id", sa.UUID(), nullable=False),
        sa.Column("created_at", sa.TIMESTAMP(timezone=True), nullable=False),
        sa.Column("updated_at", sa.TIMESTAMP(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(
            ["permission_id"],
            ["permissions.id"],
            name=op.f("roles_permissions_permission_id_fkey"),
        ),
        sa.ForeignKeyConstraint(
            ["role_id"], ["roles.id"], name=op.f("roles_permissions_role_id_fkey")
        ),
        sa.PrimaryKeyConstraint(
            "role_id", "permission_id", name=op.f("roles_permissions_pkey")
        ),
    )
    op.create_table(
        "users",
        sa.Column(
            "id",
            sa.Uuid(),
            nullable=False,
            comment="Уникальный идентификатор пользователя.",
        ),
        sa.Column(
            "email",
            sa.String(),
            nullable=False,
            comment="Электронная почта пользователя.",
        ),
        sa.Column(
            "hashed_password",
            sa.String(),
            nullable=False,
            comment="Хэшированный пароль пользователя.",
        ),
        sa.Column(
            "role_id", sa.UUID(), nullable=False, comment="ID роли пользователя."
        ),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP AT TIME ZONE 'UTC')"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP AT TIME ZONE 'UTC')"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["role_id"], ["roles.id"], name=op.f("users_role_id_fkey")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("users_pkey")),
        sa.UniqueConstraint("email", name=op.f("users_email_key")),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("users")
    op.drop_table("roles_permissions")
    op.drop_table("roles")
    op.drop_table("permissions")
    # ### end Alembic commands ###
