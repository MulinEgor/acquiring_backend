# MARK: Base
x-db-base: &db-base
  image: postgres:16
  restart: always
  healthcheck:
    test:
      - CMD-SHELL
      - pg_isready -U postgres
    interval: 10s
    timeout: 5s
    retries: 5

x-app-base: &app-base
  build:
    context: ./
  restart: always

services:
  # MARK: DB
  db:
    profiles: [ "dev" ]
    container_name: "db"
    <<: *db-base
    ports:
      - 5432:5432
    env_file:
      - ./.env
    expose:
      - 5432
    volumes:
      - ./volumes/postgres/docker-entrypoint-initdb.d/:/docker-entrypoint-initdb.d/
      - pgdata:/var/lib/postgresql/data
    networks:
      - dev

  # MARK: Redis
  redis:
    profiles: [ "dev" ]
    container_name: "redis"
    image: redis:alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 1s
      timeout: 3s
      retries: 5
    networks:
      - dev

  # MARK: Celery
  celery-worker:
    profiles: [ "dev" ]
    container_name: "celery-worker"
    <<: *app-base
    command: celery -A tasks.celery_worker worker --loglevel=info
    volumes:
      - ./:/app
      - /app/.venv
    env_file:
      - ./.env
    healthcheck:
      test: ["CMD", "celery", "-A", "tasks.celery_worker", "inspect", "ping"]
      interval: 10s
      timeout: 10s
      retries: 3
    networks:
      - dev

  celery-beat:
    profiles: [ "dev" ]
    container_name: "celery-beat"
    <<: *app-base
    command: celery -A tasks.celery_worker beat --loglevel=info
    volumes:
      - ./:/app
      - /app/.venv
    env_file:
      - ./.env
    healthcheck:
      test: ["CMD", "celery", "-A", "tasks.celery_worker", "inspect", "ping"]
      interval: 10s
      timeout: 10s
      retries: 3
    networks:
      - dev

  # MARK: API
  api:
    profiles: [ "dev" ]
    container_name: "api"
    <<: *app-base
    command: granian --interface asgi --reload --host 0.0.0.0 --port 8000 src.main:app
    volumes:
      - ./:/app
      - /app/.venv
    env_file:
      - ./.env
    ports:
      - 8000:8000
    expose:
      - 8000
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - dev

  # MARK: Test DB
  db-test:
    profiles: [ "test" ]
    container_name: "db-test"
    <<: *db-base
    env_file:
      - ./.env.test
    networks:
      - test

  # MARK: Test API
  api-test:
    profiles: [ "test" ]
    container_name: "api-test"
    build:
      context: ./
      args:
        ENV: test
    command: sh -c "
      alembic upgrade heads &&
      coverage run --source='.' \
      -m pytest \
      --dist loadscope \
      -s -r A \
      --rootdir=/app/ \
      --disable-pytest-warnings && \
      coverage html"
    env_file:
      - ./.env.test
    volumes:
      - ./:/app
      - /app/.venv
    depends_on:
      db-test:
        condition: service_healthy
    networks:
      - test

volumes:
  pgdata:
  redis-data:


networks:
  dev:
  test: